package com.example.Insideout.controller;import com.example.Insideout.dto.CommentRequest;import com.example.Insideout.dto.CommentResponse;import com.example.Insideout.service.CommentService;import com.example.Insideout.service.JwtUtil;import io.jsonwebtoken.JwtException;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping("/api/comments")public class CommentController {    private final CommentService commentService;    private final JwtUtil jwtUtil;    public CommentController(CommentService commentService, JwtUtil jwtUtil) {        this.commentService = commentService;        this.jwtUtil = jwtUtil;    }    // 댓글 작성    @PostMapping("/{inquiryId}")    public ResponseEntity<CommentResponse> addComment(@PathVariable Long inquiryId,                                                      @RequestBody CommentRequest request,                                                      @RequestHeader("Authorization") String token) {        try {            jwtUtil.validateToken(token);            CommentResponse response = commentService.addComment(inquiryId, request);            return ResponseEntity.ok(response);        } catch (JwtException e) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);        } catch (Exception e) {            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);        }    }    //댓글 삭제    @DeleteMapping("/delete")    public ResponseEntity<String> deleteComment(@RequestBody CommentRequest request,                                                @RequestHeader("Authorization") String token) {        try {            jwtUtil.validateToken(token);            commentService.deleteComment(request.getCommentId(), request.getUserId());            return ResponseEntity.ok("댓글이 성공적으로 삭제되었습니다.");        } catch (JwtException e) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(e.getMessage());        } catch (Exception e) {            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());        }    }    // 댓글 수정    @PutMapping("/{commentId}")    public ResponseEntity<CommentResponse> updateComment(@PathVariable("commentId") Long commentId,                                                         @RequestBody CommentRequest request,                                                         @RequestHeader("Authorization") String token) {        try {            jwtUtil.validateToken(token);            CommentResponse response = commentService.updateComment(commentId, request.getUserId(), request.getContent());            return ResponseEntity.ok(response);        } catch (JwtException e) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);        } catch (Exception e) {            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);        }    }}